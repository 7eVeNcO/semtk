package com.ge.research.semtk.sparqlX.dispatch.client;

import org.json.simple.JSONObject;
import org.json.simple.parser.JSONParser;

import com.ge.research.semtk.belmont.AutoGeneratedQueryTypes;
import com.ge.research.semtk.belmont.NodeGroup;
import com.ge.research.semtk.resultSet.SimpleResultSet;
import com.ge.research.semtk.resultSet.Table;
import com.ge.research.semtk.resultSet.TableResultSet;
import com.ge.research.semtk.services.client.RestClient;

public class DispatchRestClient extends RestClient{

	@Override
	public void buildParametersJSON() throws Exception {
		// TODO Auto-generated method stub
		
	}

	@Override
	public void handleEmptyResponse() throws Exception {
		// TODO Auto-generated method stub
		
	}

	public DispatchRestClient (DispatchClientConfig config) {
		this.conf = config;
	}
	
	public SimpleResultSet executeQueryFromNodeGroup(JSONObject nodeGroupWithConnection, JSONObject constraints) throws Exception{
		SimpleResultSet retval = null;
		
		// in the event a null set of constraints was passed, create the minimally valid set.
		// they are json formatted like this:
		// {"@constraintSet":{"@op":"AND","@constraints":[]}}
		
		if(constraints == null){
			JSONParser jParse = new JSONParser();
			constraints = (JSONObject) jParse.parse("{\"@constraintSet\":{\"@op\":\"AND\",\"@constraints\":[]}}");	
		}
		
		// setup the arguments we intend to send.
		conf.setServiceEndpoint("dispatcher/queryFromNodeGroup");
		this.parametersJSON.put("jsonRenderedNodeGroup", nodeGroupWithConnection.toJSONString());
		this.parametersJSON.put("constraintSet", constraints.toJSONString());
		
		
		//-- Sanity 
		NodeGroup sanity = new NodeGroup();
		sanity.addJsonEncodedNodeGroup( (JSONObject) (nodeGroupWithConnection.get("sNodeGroup")));
		
		System.err.println("SANITY check on serialized nodegroup after hand off. the folowing sparql was generated: ");
		System.err.println(sanity.generateSparql(AutoGeneratedQueryTypes.QUERY_DISTINCT, false, 0, null));
		// end sanity check
		
		try{
			retval = SimpleResultSet.fromJson((JSONObject) this.execute());
			retval.throwExceptionIfUnsuccessful();
		} 
		finally {
			// reset conf and parametersJSON
			conf.setServiceEndpoint(null);
			this.parametersJSON.remove("jsonRenderedNodeGroup");
			this.parametersJSON.remove("constraintSet");
		}
		
		return retval;
	}
	
	public TableResultSet executeGetConstraintInfo(JSONObject nodeGroup) throws Exception{
		TableResultSet retval = new TableResultSet();
		
		conf.setServiceEndpoint("dispatcher/getConstraintInfo");
		this.parametersJSON.put("jsonRenderedNodeGroup", nodeGroup.toJSONString());
		
		try{
			JSONObject jobj = (JSONObject) this.execute();
			JSONObject tblWrapper = (JSONObject)jobj.get("table");
			
			Table tbl = Table.fromJson((JSONObject)tblWrapper.get("@table"));
			retval.addResults(tbl);
			retval.readJson(jobj);
			retval.throwExceptionIfUnsuccessful();
		}
		finally{
			// reset conf and parametersJSON
			conf.setServiceEndpoint(null);
			this.parametersJSON.remove("jsonRenderedNodeGroup");
		}
		
		return retval;
	}
}