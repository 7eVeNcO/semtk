package com.ge.research.semtk.sparqlX.test;

import static org.junit.Assert.*;

import org.junit.Test;

import com.ge.research.semtk.belmont.AutoGeneratedQueryTypes;
import com.ge.research.semtk.belmont.NodeGroup;
import com.ge.research.semtk.load.utility.SparqlGraphJson;
import com.ge.research.semtk.utility.Utility;

public class SparqlConnectionTest {

	@Test
	public void SparqlConnectionTest1() throws Exception {
		SparqlGraphJson sgJson = new SparqlGraphJson(Utility.getJSONObjectFromFilePath("src/test/resources/TedDevAndBattery.json"));
		NodeGroup ng = NodeGroup.getInstanceFromJson(sgJson.getSNodeGroupJson());
		String sparql = ng.generateSparql(AutoGeneratedQueryTypes.QUERY_DISTINCT, false, 0, null);
		
		String expect = "prefix externalDataConnection:<http://research.ge.com/kdl/sparqlgraph/externalDataConnection#>\r\n" + 
				"prefix timeseries:<http://research.ge.com/energy/turbineeng/timeseries#>\r\n" + 
				"prefix generateSparqlInsert:<belmont/generateSparqlInsert#>\r\n" + 
				"prefix XMLSchema:<http://www.w3.org/2001/XMLSchema#>\r\n" + 
				"prefix batterydemo:<http://kdl.ge.com/batterydemo#>\r\n" + 
				"select distinct ?cellId ?mapName ?tag where {\r\n" + 
				"	?Table a timeseries:Table .\r\n" + 
				"\r\n" + 
				"	?Table externalDataConnection:map ?MeasurementMap .\r\n" + 
				"		?MeasurementMap a timeseries:MeasurementMap .\r\n" + 
				"		?MeasurementMap externalDataConnection:mapName ?mapName .\r\n" + 
				"\r\n" + 
				"		?MeasurementMap externalDataConnection:hasMeasurement ?Measurement .\r\n" + 
				"			?Measurement a timeseries:Measurement .\r\n" + 
				"			?Measurement externalDataConnection:tag ?tag .\r\n" + 
				"	?Cell a batterydemo:Cell .\r\n" + 
				"	?Cell batterydemo:cellId ?cellId .\r\n" + 
				"	FILTER regex(?cellId, ?mapName) .\r\n" + 
				"}\r\n";
		expect = expect.replaceAll("\\s+", " ");
		sparql = sparql.replaceAll("\\s+", " ");
		assertTrue(sparql.equals(expect));
		assertEquals(sgJson.getSparqlConn().getModelInterfaceCount(), 2);
	}

}
